LC 4 寻找两个正序数组的中位数

public double findMedianSortedArrays(int[] nums1, int[] nums2){
    int len1 = nums1.length, len2 = nums2.length;
    int totalLen = len1 + len2;
    int midIndex = totalLen/2;

    if(totalLen%2 == 0){
        double mid = (getKthElement(nums1, nums2, midIndex) + getKthElement(nums1, nums2, midIndex+1))/2.0;
        return mid;
    }else{
        double mid = getKthElement(nums1, nums2, midIndex+1);
        return mid;
    }
}

public int getKthElement(int[] nums1, int[] nums2, int k){
    int len1 = nums1.length, len2 = nums2.length;
    int index1 = 0, index2 = 0;
    while(true){
        // 边界情况
        //1. nums1遍历到头了
        if(index1 >= len1){
            return nums2[index2 + k -1];
        }
        //2. nums2遍历到头了
        if(index2 >= len2){
            return nums1[index1 + k -1];
        }
        // k == 1, 返回nums1[index1]和nums2[index2]中小的即可
        if(k == 1){
            return Math.min(nums1[index1], nums2[index2]);
        }

        // 正常情况
        int half = k/2;
        int newIndex1 = Math.min(len1, index1 + half) - 1;
        int newIndex2 = Math.min(len2, index2 + half) - 1;
        if(nums1[newIndex1] < nums2[newIndex2]){
            k -= newIndex1 - index1 + 1;
            index1 = newIndex1 + 1; // 淘汰nums1 index1-newIndex1的部分
        }else{
            k -= newIndex2 - index2 + 1;
            index2 = newIndex2 + 1; // // 淘汰nums2 index2-newIndex2的部分
        }
    }
}

LC 25 K个一组翻转链表
dummy.next = head;
pre = dummy;
end = dummy;
while(true){
    for(int i = 0; i<k && end!=null; ++i){
        end = end.next;
    }
    if(end == null) break;
    start = pre.next;
    next = end.next;
    end.next = null;
    pre.next = reverseList(start);
    start.next = next;
    pre = start;
    end = pre;
}
return dummy.next;

LC 31 下一个排列
/*
首先我们需要将左边较小的数与一个右边较大的数交换，同时这个较小的数尽量靠右，而较大的数尽量小
1. 从尾部向前找(i,j)找到第一个 a[i]<a[j]的数，此时这个数就是尽量靠左的较小的数
2. 由于我们上一步向前走的条件是a[i]<a[j]所以 [j,nums.length-1]一定是降序排序
3. 我们在[j,nums.length-1]中找到一个比a[i]大，又尽量靠右的数，那么就可以使用二分查找
4. 将查找的数与a[i]交换，然后再将[j,nums.length-1]逆序，就是下一个排列
**/
public void nextPermutation(int[] nums){
    int i = nums.length - 2;
    for(;i>=0 && nums[i]>=nums[i+1];--i);
    if(i>=0){
        int j = binarySearch(nums, nums[i],i+1, nums.length-1);
        swap(nums,i,j);
    }
    reverse(nums,i+1, nums.length-1);
}

public void swap(int nums[], int i, int j){
    int temp = nums[i];
    nums[i] = nums[j];
    nums[j] = temp;
}

public void reverse(int nums[], int i, int j){
    while(i<j){
        swap(nums,i,j);
        i++;
        j--;
    }
}
public int binarySearch(int nums[], int target, int left, int right){
    while(left<=right){
        int mid = (left + right) >>> 1;
        if(nums[mid] > target){
            left = mid + 1;
        }else{
            right = mid - 1;
        }
    }
    return right;
}

LC 42 接雨水
// 第一种方法：
/*
使用两个数组，分别保存当前位置左边最高的，和右边最高的
*/
public int trap(int[] height) {
    if(height.length == 0) return 0;
    int n = height.length;
    int[] lMax = new int[n];
    int[] rMax = new int[n];
    lMax[0] = height[0];
    for(int i = 1; i<n;++i){
        lMax[i] = Math.max(lMax[i-1],height[i]);
    }
    rMax[n-1] = height[n-1];
    for(int i = n-2; i>=0;--i){
        rMax[i] = Math.max(rMax[i+1],height[i]);
    }
    int sum = 0;
    for(int i = 1;i<n-1;++i){
        sum += Math.min(lMax[i],rMax[i]) - height[i];
    }
    return sum;
}

// 第二种
/*
使用双指针优化空间复杂度
1. 左指针记录左边的最大值，右指针记录右边的最大值
*/
public int trap(int[] height) {
    long sum = 0;
    int n = height.length;
    int left = 0, right = n-1;
    int lMax = height[0];
    int rMax = height[n-1];
    while(left<=right){
        lMax = Math.max(lMax, height[left]);
        rMax = Math.max(rMax, height[right]);
        if(lMax < rMax){
            sum += lMax - height[left];
            left++;
        }else{
            sum += rMax - height[right];
            right--;
        }
    }
    return sum;
}


LC 146 LRU缓存
public class LRUCache{
    private Map<Integer, Node> map;
    private DoubleList cache;
    private int capacity;
    public LRUCache(int capacity) {
        cache = new DoubleList();
        map = new HashMap<>();
        this.capacity = capacity;
    }

    public int get(int key) {
        if(!map.containsKey(key)) return -1;
        Node node = map.get(key);
        cache.remove(node);
        cache.addFirst(node);
        return node.val;
    }

    public void put(int key, int value) {
        Node node = new Node(key,value);
        if(map.containsKey(key)){
            cache.remove(map.get(key));
        }else if(capacity == map.size()){
            int k = cache.removeLast();
            map.remove(k);
        }
        cache.addFirst(node);
        map.put(key,node);
    }

    class Node{
        int key;
        int val;
        Node next;
        Node pre;

        public Node(){

        }

        public Node(int key, int val){
            this.key = key;
            this.val = val;
        }
    }

    class DoubleList{
        Node head;
        Node tail;

        DoubleList(){
            head = new Node();
            tail = new Node();
            head.next = tail;
            tail.pre = head;
        }

        public void addFirst(Node node){
            head.next.pre = node;
            node.next = head.next;
            head.next = node;
            node.pre = head;
        }

        public int remove(Node node){
            int key = node.key;
            node.pre.next = node.next;
            node.next.pre = node.pre;
            return key;
        }

        public int removeLast(){
            if(head.next == tail){
                return -1;
            }
            return remove(tail.pre);
        }
    }

}


